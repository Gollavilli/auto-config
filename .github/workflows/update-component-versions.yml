name: EKS Component Version Updater

on:
  schedule:
    # Run every 10 days
    - cron: '0 0 */10 * *'
  workflow_dispatch:  # Allow manual triggering

jobs:
  update-versions:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate branch name
        id: branch-name
        run: |
          echo "BRANCH_NAME=version-update-$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyGithub requests

      - name: Create and checkout new branch
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b ${{ steps.branch-name.outputs.BRANCH_NAME }}

      - name: Update component versions
        id: update-versions
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Before update - metadata content:"
          cat config/metadata.json
          
          python update_component_versions.py
          
          echo "After update - metadata content:"
          cat config/metadata.json
          
          echo "Diff:"
          git diff config/metadata.json

      - name: Check for changes
        id: git-check
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "CHANGES=true" >> $GITHUB_OUTPUT
          else
            echo "CHANGES=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        if: steps.git-check.outputs.CHANGES == 'true'
        run: |
          echo "Changes detected, committing..."
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Verify file exists
          ls -la config/metadata.json
          
          # Add the file
          git add config/metadata.json
          
          # Check git status after adding
          git status
          
          # Commit the changes
          git commit -m "chore: update component versions $(date +'%Y-%m-%d')"
          
          # Push the changes
          echo "Pushing changes..."
          git push --set-upstream origin ${{ steps.branch-name.outputs.BRANCH_NAME }}
          
          # Verify push was successful
          echo "Push completed, verifying remote branch..."
          git ls-remote --heads origin ${{ steps.branch-name.outputs.BRANCH_NAME }}

      - name: Create Pull Request
        if: steps.git-check.outputs.CHANGES == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Install GitHub CLI if not already installed
          if ! command -v gh &> /dev/null; then
            echo "Installing GitHub CLI..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
          fi
          
          # Create PR without labels first
          echo "Creating PR..."
          PR_URL=$(gh pr create --title "chore: update component versions $(date +'%Y-%m-%d')" \
            --body "This PR updates the following components to their latest versions:
            
            ${{ steps.update-versions.outputs.changes }}
            
            This PR was automatically generated by the EKS Component Version Updater workflow." \
            --base main \
            --head ${{ steps.branch-name.outputs.BRANCH_NAME }})
          
          echo "PR created: $PR_URL"
